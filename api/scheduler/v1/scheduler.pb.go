// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: api/scheduler/v1/scheduler.proto

package scheduler_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WorkflowRun struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RunId         string                 `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	WorkflowId    string                 `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	Status        string                 `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	RequestedBy   string                 `protobuf:"bytes,4,opt,name=requested_by,json=requestedBy,proto3" json:"requested_by,omitempty"`
	Type          string                 `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	ExternalRef   string                 `protobuf:"bytes,6,opt,name=external_ref,json=externalRef,proto3" json:"external_ref,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowRun) Reset() {
	*x = WorkflowRun{}
	mi := &file_api_scheduler_v1_scheduler_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowRun) ProtoMessage() {}

func (x *WorkflowRun) ProtoReflect() protoreflect.Message {
	mi := &file_api_scheduler_v1_scheduler_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowRun.ProtoReflect.Descriptor instead.
func (*WorkflowRun) Descriptor() ([]byte, []int) {
	return file_api_scheduler_v1_scheduler_proto_rawDescGZIP(), []int{0}
}

func (x *WorkflowRun) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *WorkflowRun) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *WorkflowRun) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *WorkflowRun) GetRequestedBy() string {
	if x != nil {
		return x.RequestedBy
	}
	return ""
}

func (x *WorkflowRun) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *WorkflowRun) GetExternalRef() string {
	if x != nil {
		return x.ExternalRef
	}
	return ""
}

type RunResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ok            bool                   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Run           *WorkflowRun           `protobuf:"bytes,2,opt,name=run,proto3" json:"run,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunResponse) Reset() {
	*x = RunResponse{}
	mi := &file_api_scheduler_v1_scheduler_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunResponse) ProtoMessage() {}

func (x *RunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_scheduler_v1_scheduler_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunResponse.ProtoReflect.Descriptor instead.
func (*RunResponse) Descriptor() ([]byte, []int) {
	return file_api_scheduler_v1_scheduler_proto_rawDescGZIP(), []int{1}
}

func (x *RunResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *RunResponse) GetRun() *WorkflowRun {
	if x != nil {
		return x.Run
	}
	return nil
}

type RunRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RunId         string                 `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	WorkflowId    string                 `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RequestedBy   string                 `protobuf:"bytes,3,opt,name=requested_by,json=requestedBy,proto3" json:"requested_by,omitempty"`
	Type          string                 `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	ExternalRef   string                 `protobuf:"bytes,5,opt,name=external_ref,json=externalRef,proto3" json:"external_ref,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunRequest) Reset() {
	*x = RunRequest{}
	mi := &file_api_scheduler_v1_scheduler_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRequest) ProtoMessage() {}

func (x *RunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_scheduler_v1_scheduler_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRequest.ProtoReflect.Descriptor instead.
func (*RunRequest) Descriptor() ([]byte, []int) {
	return file_api_scheduler_v1_scheduler_proto_rawDescGZIP(), []int{2}
}

func (x *RunRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *RunRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *RunRequest) GetRequestedBy() string {
	if x != nil {
		return x.RequestedBy
	}
	return ""
}

func (x *RunRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RunRequest) GetExternalRef() string {
	if x != nil {
		return x.ExternalRef
	}
	return ""
}

type DeleteRunRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRunRequest) Reset() {
	*x = DeleteRunRequest{}
	mi := &file_api_scheduler_v1_scheduler_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRunRequest) ProtoMessage() {}

func (x *DeleteRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_scheduler_v1_scheduler_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRunRequest.ProtoReflect.Descriptor instead.
func (*DeleteRunRequest) Descriptor() ([]byte, []int) {
	return file_api_scheduler_v1_scheduler_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteRunRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ok            bool                   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	mi := &file_api_scheduler_v1_scheduler_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_scheduler_v1_scheduler_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return file_api_scheduler_v1_scheduler_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type Rule struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Target        string                 `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Group         bool                   `protobuf:"varint,2,opt,name=group,proto3" json:"group,omitempty"`
	NewField      string                 `protobuf:"bytes,3,opt,name=new_field,json=newField,proto3" json:"new_field,omitempty"`
	Order         int32                  `protobuf:"varint,4,opt,name=order,proto3" json:"order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Rule) Reset() {
	*x = Rule{}
	mi := &file_api_scheduler_v1_scheduler_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_api_scheduler_v1_scheduler_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_api_scheduler_v1_scheduler_proto_rawDescGZIP(), []int{5}
}

func (x *Rule) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Rule) GetGroup() bool {
	if x != nil {
		return x.Group
	}
	return false
}

func (x *Rule) GetNewField() string {
	if x != nil {
		return x.NewField
	}
	return ""
}

func (x *Rule) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type LocalCSVConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Path          string                 `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocalCSVConfig) Reset() {
	*x = LocalCSVConfig{}
	mi := &file_api_scheduler_v1_scheduler_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalCSVConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalCSVConfig) ProtoMessage() {}

func (x *LocalCSVConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_scheduler_v1_scheduler_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalCSVConfig.ProtoReflect.Descriptor instead.
func (*LocalCSVConfig) Descriptor() ([]byte, []int) {
	return file_api_scheduler_v1_scheduler_proto_rawDescGZIP(), []int{6}
}

func (x *LocalCSVConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LocalCSVConfig) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type CloudCSVConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Path          string                 `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Bucket        string                 `protobuf:"bytes,3,opt,name=bucket,proto3" json:"bucket,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloudCSVConfig) Reset() {
	*x = CloudCSVConfig{}
	mi := &file_api_scheduler_v1_scheduler_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudCSVConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudCSVConfig) ProtoMessage() {}

func (x *CloudCSVConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_scheduler_v1_scheduler_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudCSVConfig.ProtoReflect.Descriptor instead.
func (*CloudCSVConfig) Descriptor() ([]byte, []int) {
	return file_api_scheduler_v1_scheduler_proto_rawDescGZIP(), []int{7}
}

func (x *CloudCSVConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloudCSVConfig) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CloudCSVConfig) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

type MongoConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Protocol      string                 `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Host          string                 `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	User          string                 `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Pwd           string                 `protobuf:"bytes,4,opt,name=pwd,proto3" json:"pwd,omitempty"`
	Params        string                 `protobuf:"bytes,5,opt,name=params,proto3" json:"params,omitempty"`
	Name          string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MongoConfig) Reset() {
	*x = MongoConfig{}
	mi := &file_api_scheduler_v1_scheduler_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongoConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoConfig) ProtoMessage() {}

func (x *MongoConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_scheduler_v1_scheduler_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoConfig.ProtoReflect.Descriptor instead.
func (*MongoConfig) Descriptor() ([]byte, []int) {
	return file_api_scheduler_v1_scheduler_proto_rawDescGZIP(), []int{8}
}

func (x *MongoConfig) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *MongoConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *MongoConfig) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *MongoConfig) GetPwd() string {
	if x != nil {
		return x.Pwd
	}
	return ""
}

func (x *MongoConfig) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

func (x *MongoConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type LocalCSVMongoConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CsvConfig     *LocalCSVConfig        `protobuf:"bytes,1,opt,name=csv_config,json=csvConfig,proto3" json:"csv_config,omitempty"`
	MongoConfig   *MongoConfig           `protobuf:"bytes,2,opt,name=mongo_config,json=mongoConfig,proto3" json:"mongo_config,omitempty"`
	Collection    string                 `protobuf:"bytes,3,opt,name=collection,proto3" json:"collection,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocalCSVMongoConfig) Reset() {
	*x = LocalCSVMongoConfig{}
	mi := &file_api_scheduler_v1_scheduler_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalCSVMongoConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalCSVMongoConfig) ProtoMessage() {}

func (x *LocalCSVMongoConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_scheduler_v1_scheduler_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalCSVMongoConfig.ProtoReflect.Descriptor instead.
func (*LocalCSVMongoConfig) Descriptor() ([]byte, []int) {
	return file_api_scheduler_v1_scheduler_proto_rawDescGZIP(), []int{9}
}

func (x *LocalCSVMongoConfig) GetCsvConfig() *LocalCSVConfig {
	if x != nil {
		return x.CsvConfig
	}
	return nil
}

func (x *LocalCSVMongoConfig) GetMongoConfig() *MongoConfig {
	if x != nil {
		return x.MongoConfig
	}
	return nil
}

func (x *LocalCSVMongoConfig) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

type CloudCSVMongoConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CsvConfig     *CloudCSVConfig        `protobuf:"bytes,1,opt,name=csv_config,json=csvConfig,proto3" json:"csv_config,omitempty"`
	MongoConfig   *MongoConfig           `protobuf:"bytes,2,opt,name=mongo_config,json=mongoConfig,proto3" json:"mongo_config,omitempty"`
	Collection    string                 `protobuf:"bytes,3,opt,name=collection,proto3" json:"collection,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloudCSVMongoConfig) Reset() {
	*x = CloudCSVMongoConfig{}
	mi := &file_api_scheduler_v1_scheduler_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudCSVMongoConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudCSVMongoConfig) ProtoMessage() {}

func (x *CloudCSVMongoConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_scheduler_v1_scheduler_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudCSVMongoConfig.ProtoReflect.Descriptor instead.
func (*CloudCSVMongoConfig) Descriptor() ([]byte, []int) {
	return file_api_scheduler_v1_scheduler_proto_rawDescGZIP(), []int{10}
}

func (x *CloudCSVMongoConfig) GetCsvConfig() *CloudCSVConfig {
	if x != nil {
		return x.CsvConfig
	}
	return nil
}

func (x *CloudCSVMongoConfig) GetMongoConfig() *MongoConfig {
	if x != nil {
		return x.MongoConfig
	}
	return nil
}

func (x *CloudCSVMongoConfig) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

type BatchCSVRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	MaxBatches          uint32                 `protobuf:"varint,1,opt,name=max_batches,json=maxBatches,proto3" json:"max_batches,omitempty"`
	BatchSize           uint64                 `protobuf:"varint,2,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	MaxInProcessBatches uint32                 `protobuf:"varint,3,opt,name=max_in_process_batches,json=maxInProcessBatches,proto3" json:"max_in_process_batches,omitempty"`
	Start               string                 `protobuf:"bytes,4,opt,name=start,proto3" json:"start,omitempty"`
	PauseDuration       uint32                 `protobuf:"varint,5,opt,name=pause_duration,json=pauseDuration,proto3" json:"pause_duration,omitempty"` // in seconds
	PauseRecordCount    int64                  `protobuf:"varint,6,opt,name=pause_record_count,json=pauseRecordCount,proto3" json:"pause_record_count,omitempty"`
	MappingRules        map[string]*Rule       `protobuf:"bytes,7,rep,name=mapping_rules,json=mappingRules,proto3" json:"mapping_rules,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Types that are valid to be assigned to JobConfig:
	//
	//	*BatchCSVRequest_CloudCsvMongoConfig
	//	*BatchCSVRequest_LocalCsvMongoConfig
	JobConfig     isBatchCSVRequest_JobConfig `protobuf_oneof:"job_config"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchCSVRequest) Reset() {
	*x = BatchCSVRequest{}
	mi := &file_api_scheduler_v1_scheduler_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchCSVRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCSVRequest) ProtoMessage() {}

func (x *BatchCSVRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_scheduler_v1_scheduler_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCSVRequest.ProtoReflect.Descriptor instead.
func (*BatchCSVRequest) Descriptor() ([]byte, []int) {
	return file_api_scheduler_v1_scheduler_proto_rawDescGZIP(), []int{11}
}

func (x *BatchCSVRequest) GetMaxBatches() uint32 {
	if x != nil {
		return x.MaxBatches
	}
	return 0
}

func (x *BatchCSVRequest) GetBatchSize() uint64 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *BatchCSVRequest) GetMaxInProcessBatches() uint32 {
	if x != nil {
		return x.MaxInProcessBatches
	}
	return 0
}

func (x *BatchCSVRequest) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *BatchCSVRequest) GetPauseDuration() uint32 {
	if x != nil {
		return x.PauseDuration
	}
	return 0
}

func (x *BatchCSVRequest) GetPauseRecordCount() int64 {
	if x != nil {
		return x.PauseRecordCount
	}
	return 0
}

func (x *BatchCSVRequest) GetMappingRules() map[string]*Rule {
	if x != nil {
		return x.MappingRules
	}
	return nil
}

func (x *BatchCSVRequest) GetJobConfig() isBatchCSVRequest_JobConfig {
	if x != nil {
		return x.JobConfig
	}
	return nil
}

func (x *BatchCSVRequest) GetCloudCsvMongoConfig() *CloudCSVMongoConfig {
	if x != nil {
		if x, ok := x.JobConfig.(*BatchCSVRequest_CloudCsvMongoConfig); ok {
			return x.CloudCsvMongoConfig
		}
	}
	return nil
}

func (x *BatchCSVRequest) GetLocalCsvMongoConfig() *LocalCSVMongoConfig {
	if x != nil {
		if x, ok := x.JobConfig.(*BatchCSVRequest_LocalCsvMongoConfig); ok {
			return x.LocalCsvMongoConfig
		}
	}
	return nil
}

type isBatchCSVRequest_JobConfig interface {
	isBatchCSVRequest_JobConfig()
}

type BatchCSVRequest_CloudCsvMongoConfig struct {
	CloudCsvMongoConfig *CloudCSVMongoConfig `protobuf:"bytes,8,opt,name=cloud_csv_mongo_config,json=cloudCsvMongoConfig,proto3,oneof"`
}

type BatchCSVRequest_LocalCsvMongoConfig struct {
	LocalCsvMongoConfig *LocalCSVMongoConfig `protobuf:"bytes,9,opt,name=local_csv_mongo_config,json=localCsvMongoConfig,proto3,oneof"`
}

func (*BatchCSVRequest_CloudCsvMongoConfig) isBatchCSVRequest_JobConfig() {}

func (*BatchCSVRequest_LocalCsvMongoConfig) isBatchCSVRequest_JobConfig() {}

var File_api_scheduler_v1_scheduler_proto protoreflect.FileDescriptor

const file_api_scheduler_v1_scheduler_proto_rawDesc = "" +
	"\n" +
	" api/scheduler/v1/scheduler.proto\x12\fscheduler.v1\"\xb7\x01\n" +
	"\vWorkflowRun\x12\x15\n" +
	"\x06run_id\x18\x01 \x01(\tR\x05runId\x12\x1f\n" +
	"\vworkflow_id\x18\x02 \x01(\tR\n" +
	"workflowId\x12\x16\n" +
	"\x06status\x18\x03 \x01(\tR\x06status\x12!\n" +
	"\frequested_by\x18\x04 \x01(\tR\vrequestedBy\x12\x12\n" +
	"\x04type\x18\x05 \x01(\tR\x04type\x12!\n" +
	"\fexternal_ref\x18\x06 \x01(\tR\vexternalRef\"J\n" +
	"\vRunResponse\x12\x0e\n" +
	"\x02ok\x18\x01 \x01(\bR\x02ok\x12+\n" +
	"\x03run\x18\x02 \x01(\v2\x19.scheduler.v1.WorkflowRunR\x03run\"\x9e\x01\n" +
	"\n" +
	"RunRequest\x12\x15\n" +
	"\x06run_id\x18\x01 \x01(\tR\x05runId\x12\x1f\n" +
	"\vworkflow_id\x18\x02 \x01(\tR\n" +
	"workflowId\x12!\n" +
	"\frequested_by\x18\x03 \x01(\tR\vrequestedBy\x12\x12\n" +
	"\x04type\x18\x04 \x01(\tR\x04type\x12!\n" +
	"\fexternal_ref\x18\x05 \x01(\tR\vexternalRef\"\"\n" +
	"\x10DeleteRunRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\" \n" +
	"\x0eDeleteResponse\x12\x0e\n" +
	"\x02ok\x18\x01 \x01(\bR\x02ok\"g\n" +
	"\x04Rule\x12\x16\n" +
	"\x06target\x18\x01 \x01(\tR\x06target\x12\x14\n" +
	"\x05group\x18\x02 \x01(\bR\x05group\x12\x1b\n" +
	"\tnew_field\x18\x03 \x01(\tR\bnewField\x12\x14\n" +
	"\x05order\x18\x04 \x01(\x05R\x05order\"8\n" +
	"\x0eLocalCSVConfig\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04path\x18\x02 \x01(\tR\x04path\"P\n" +
	"\x0eCloudCSVConfig\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04path\x18\x02 \x01(\tR\x04path\x12\x16\n" +
	"\x06bucket\x18\x03 \x01(\tR\x06bucket\"\x8f\x01\n" +
	"\vMongoConfig\x12\x1a\n" +
	"\bprotocol\x18\x01 \x01(\tR\bprotocol\x12\x12\n" +
	"\x04host\x18\x02 \x01(\tR\x04host\x12\x12\n" +
	"\x04user\x18\x03 \x01(\tR\x04user\x12\x10\n" +
	"\x03pwd\x18\x04 \x01(\tR\x03pwd\x12\x16\n" +
	"\x06params\x18\x05 \x01(\tR\x06params\x12\x12\n" +
	"\x04name\x18\x06 \x01(\tR\x04name\"\xb0\x01\n" +
	"\x13LocalCSVMongoConfig\x12;\n" +
	"\n" +
	"csv_config\x18\x01 \x01(\v2\x1c.scheduler.v1.LocalCSVConfigR\tcsvConfig\x12<\n" +
	"\fmongo_config\x18\x02 \x01(\v2\x19.scheduler.v1.MongoConfigR\vmongoConfig\x12\x1e\n" +
	"\n" +
	"collection\x18\x03 \x01(\tR\n" +
	"collection\"\xb0\x01\n" +
	"\x13CloudCSVMongoConfig\x12;\n" +
	"\n" +
	"csv_config\x18\x01 \x01(\v2\x1c.scheduler.v1.CloudCSVConfigR\tcsvConfig\x12<\n" +
	"\fmongo_config\x18\x02 \x01(\v2\x19.scheduler.v1.MongoConfigR\vmongoConfig\x12\x1e\n" +
	"\n" +
	"collection\x18\x03 \x01(\tR\n" +
	"collection\"\xde\x04\n" +
	"\x0fBatchCSVRequest\x12\x1f\n" +
	"\vmax_batches\x18\x01 \x01(\rR\n" +
	"maxBatches\x12\x1d\n" +
	"\n" +
	"batch_size\x18\x02 \x01(\x04R\tbatchSize\x123\n" +
	"\x16max_in_process_batches\x18\x03 \x01(\rR\x13maxInProcessBatches\x12\x14\n" +
	"\x05start\x18\x04 \x01(\tR\x05start\x12%\n" +
	"\x0epause_duration\x18\x05 \x01(\rR\rpauseDuration\x12,\n" +
	"\x12pause_record_count\x18\x06 \x01(\x03R\x10pauseRecordCount\x12T\n" +
	"\rmapping_rules\x18\a \x03(\v2/.scheduler.v1.BatchCSVRequest.MappingRulesEntryR\fmappingRules\x12X\n" +
	"\x16cloud_csv_mongo_config\x18\b \x01(\v2!.scheduler.v1.CloudCSVMongoConfigH\x00R\x13cloudCsvMongoConfig\x12X\n" +
	"\x16local_csv_mongo_config\x18\t \x01(\v2!.scheduler.v1.LocalCSVMongoConfigH\x00R\x13localCsvMongoConfig\x1aS\n" +
	"\x11MappingRulesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12(\n" +
	"\x05value\x18\x02 \x01(\v2\x12.scheduler.v1.RuleR\x05value:\x028\x01B\f\n" +
	"\n" +
	"job_config2\x95\x03\n" +
	"\tScheduler\x12Z\n" +
	"\x1cProcessLocalCSVMongoWorkflow\x12\x1d.scheduler.v1.BatchCSVRequest\x1a\x19.scheduler.v1.RunResponse\"\x00\x12Z\n" +
	"\x1cProcessCloudCSVMongoWorkflow\x12\x1d.scheduler.v1.BatchCSVRequest\x1a\x19.scheduler.v1.RunResponse\"\x00\x12B\n" +
	"\tCreateRun\x12\x18.scheduler.v1.RunRequest\x1a\x19.scheduler.v1.RunResponse\"\x00\x12?\n" +
	"\x06GetRun\x12\x18.scheduler.v1.RunRequest\x1a\x19.scheduler.v1.RunResponse\"\x00\x12K\n" +
	"\tDeleteRun\x12\x1e.scheduler.v1.DeleteRunRequest\x1a\x1c.scheduler.v1.DeleteResponse\"\x00B9Z7github.com/hankgalt/workflow-scheduler/api/scheduler_v1b\x06proto3"

var (
	file_api_scheduler_v1_scheduler_proto_rawDescOnce sync.Once
	file_api_scheduler_v1_scheduler_proto_rawDescData []byte
)

func file_api_scheduler_v1_scheduler_proto_rawDescGZIP() []byte {
	file_api_scheduler_v1_scheduler_proto_rawDescOnce.Do(func() {
		file_api_scheduler_v1_scheduler_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_scheduler_v1_scheduler_proto_rawDesc), len(file_api_scheduler_v1_scheduler_proto_rawDesc)))
	})
	return file_api_scheduler_v1_scheduler_proto_rawDescData
}

var file_api_scheduler_v1_scheduler_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_api_scheduler_v1_scheduler_proto_goTypes = []any{
	(*WorkflowRun)(nil),         // 0: scheduler.v1.WorkflowRun
	(*RunResponse)(nil),         // 1: scheduler.v1.RunResponse
	(*RunRequest)(nil),          // 2: scheduler.v1.RunRequest
	(*DeleteRunRequest)(nil),    // 3: scheduler.v1.DeleteRunRequest
	(*DeleteResponse)(nil),      // 4: scheduler.v1.DeleteResponse
	(*Rule)(nil),                // 5: scheduler.v1.Rule
	(*LocalCSVConfig)(nil),      // 6: scheduler.v1.LocalCSVConfig
	(*CloudCSVConfig)(nil),      // 7: scheduler.v1.CloudCSVConfig
	(*MongoConfig)(nil),         // 8: scheduler.v1.MongoConfig
	(*LocalCSVMongoConfig)(nil), // 9: scheduler.v1.LocalCSVMongoConfig
	(*CloudCSVMongoConfig)(nil), // 10: scheduler.v1.CloudCSVMongoConfig
	(*BatchCSVRequest)(nil),     // 11: scheduler.v1.BatchCSVRequest
	nil,                         // 12: scheduler.v1.BatchCSVRequest.MappingRulesEntry
}
var file_api_scheduler_v1_scheduler_proto_depIdxs = []int32{
	0,  // 0: scheduler.v1.RunResponse.run:type_name -> scheduler.v1.WorkflowRun
	6,  // 1: scheduler.v1.LocalCSVMongoConfig.csv_config:type_name -> scheduler.v1.LocalCSVConfig
	8,  // 2: scheduler.v1.LocalCSVMongoConfig.mongo_config:type_name -> scheduler.v1.MongoConfig
	7,  // 3: scheduler.v1.CloudCSVMongoConfig.csv_config:type_name -> scheduler.v1.CloudCSVConfig
	8,  // 4: scheduler.v1.CloudCSVMongoConfig.mongo_config:type_name -> scheduler.v1.MongoConfig
	12, // 5: scheduler.v1.BatchCSVRequest.mapping_rules:type_name -> scheduler.v1.BatchCSVRequest.MappingRulesEntry
	10, // 6: scheduler.v1.BatchCSVRequest.cloud_csv_mongo_config:type_name -> scheduler.v1.CloudCSVMongoConfig
	9,  // 7: scheduler.v1.BatchCSVRequest.local_csv_mongo_config:type_name -> scheduler.v1.LocalCSVMongoConfig
	5,  // 8: scheduler.v1.BatchCSVRequest.MappingRulesEntry.value:type_name -> scheduler.v1.Rule
	11, // 9: scheduler.v1.Scheduler.ProcessLocalCSVMongoWorkflow:input_type -> scheduler.v1.BatchCSVRequest
	11, // 10: scheduler.v1.Scheduler.ProcessCloudCSVMongoWorkflow:input_type -> scheduler.v1.BatchCSVRequest
	2,  // 11: scheduler.v1.Scheduler.CreateRun:input_type -> scheduler.v1.RunRequest
	2,  // 12: scheduler.v1.Scheduler.GetRun:input_type -> scheduler.v1.RunRequest
	3,  // 13: scheduler.v1.Scheduler.DeleteRun:input_type -> scheduler.v1.DeleteRunRequest
	1,  // 14: scheduler.v1.Scheduler.ProcessLocalCSVMongoWorkflow:output_type -> scheduler.v1.RunResponse
	1,  // 15: scheduler.v1.Scheduler.ProcessCloudCSVMongoWorkflow:output_type -> scheduler.v1.RunResponse
	1,  // 16: scheduler.v1.Scheduler.CreateRun:output_type -> scheduler.v1.RunResponse
	1,  // 17: scheduler.v1.Scheduler.GetRun:output_type -> scheduler.v1.RunResponse
	4,  // 18: scheduler.v1.Scheduler.DeleteRun:output_type -> scheduler.v1.DeleteResponse
	14, // [14:19] is the sub-list for method output_type
	9,  // [9:14] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_api_scheduler_v1_scheduler_proto_init() }
func file_api_scheduler_v1_scheduler_proto_init() {
	if File_api_scheduler_v1_scheduler_proto != nil {
		return
	}
	file_api_scheduler_v1_scheduler_proto_msgTypes[11].OneofWrappers = []any{
		(*BatchCSVRequest_CloudCsvMongoConfig)(nil),
		(*BatchCSVRequest_LocalCsvMongoConfig)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_scheduler_v1_scheduler_proto_rawDesc), len(file_api_scheduler_v1_scheduler_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_scheduler_v1_scheduler_proto_goTypes,
		DependencyIndexes: file_api_scheduler_v1_scheduler_proto_depIdxs,
		MessageInfos:      file_api_scheduler_v1_scheduler_proto_msgTypes,
	}.Build()
	File_api_scheduler_v1_scheduler_proto = out.File
	file_api_scheduler_v1_scheduler_proto_goTypes = nil
	file_api_scheduler_v1_scheduler_proto_depIdxs = nil
}

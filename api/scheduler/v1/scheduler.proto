syntax = "proto3";

package scheduler.v1;


option go_package = "github.com/hankgalt/workflow-scheduler/api/scheduler_v1";

import "google/protobuf/duration.proto";

message WorkflowRun {
    string run_id = 1;
    string workflow_id = 2;
    string status = 3;
    string requested_by = 4;
    string type = 5;
    string external_ref = 6;
}

message RunResponse {
    bool ok = 1;
    WorkflowRun run = 2;
}

message RunRequest {
    string run_id = 1;
    string workflow_id = 2;
    string requested_by = 3;
    string type = 4;
    string external_ref = 5;
}

message DeleteRunRequest {
    string id = 1;
}

message DeleteResponse {
    bool ok = 1;
}

message Rule {
    string target = 1;
    bool group = 2;
    string new_field = 3;
    int32 order = 4;
}

message LocalCSVConfig {
    string name = 1;
    string path = 2;
}

message CloudCSVConfig {
    string name = 1;
    string path = 2;
    string bucket = 3;
}

message MongoConfig {
    string protocol = 1;
    string host = 2;
    string user = 3;
    string pwd = 4;
    string params = 5;
    string name = 6;
}

message LocalCSVMongoConfig {
    LocalCSVConfig csv_config = 1;
    MongoConfig mongo_config = 2;
    string collection = 3;
}

message CloudCSVMongoConfig {
    CloudCSVConfig csv_config = 1;
    MongoConfig mongo_config = 2;
    string collection = 3;
}

message BatchCSVRequest {
    uint32 max_batches = 1;
    uint64 batch_size = 2;
    uint32 max_in_process_batches = 3;
    string start = 4;
    google.protobuf.Duration pause_duration = 5;
    int64 pause_record_count = 6;
    map<string, Rule> mapping_rules = 7;
    oneof job_config {
        CloudCSVMongoConfig cloud_csv_mongo_config = 8;
        LocalCSVMongoConfig local_csv_mongo_config = 9;
    }
}

service Scheduler {
    // Workflow management
    rpc ProcessLocalCSVMongoWorkflow(BatchCSVRequest) returns (RunResponse) {}
    rpc ProcessCloudCSVMongoWorkflow(BatchCSVRequest) returns (RunResponse) {}

    // Workflow run management
    rpc CreateRun(RunRequest) returns (RunResponse) {}
    rpc GetRun(RunRequest) returns (RunResponse) {}
    rpc DeleteRun(DeleteRunRequest) returns (DeleteResponse) {}
}
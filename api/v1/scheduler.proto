syntax = "proto3";

package scheduler.v1;

option go_package = "github.com/hankgalt/workflow-scheduler/api/scheduler_v1";

message WorkflowRun {
    string run_id = 1;
    string workflow_id = 2;
    string status = 3;
    string requested_by = 4;
    string type = 5;
    string external_ref = 6;
}

message BatchCSVRequest {
    uint32 max_batches = 1;
    uint64 batch_size = 2;
}

message RunResponse {
    bool ok = 1;
    WorkflowRun run = 2;
}

message RunRequest {
    string run_id = 1;
    string workflow_id = 2;
    string requested_by = 3;
    string type = 4;
    string external_ref = 5;
}

message DeleteRunRequest {
    string id = 1;
}

message DeleteResponse {
    bool ok = 1;
}

enum EntityType {
    AGENT = 0;
    FILING = 1;
}

message Agent {
    string id = 1;
    uint64 entity_id = 2;
    string entity_name = 3;
    string entity_org = 4;
    string first_name = 5;
    string middle_name = 6;
    string last_name = 7;
    string address = 8;
    string agent_type = 9;
}

message Filing {
    string id = 1;
    uint64 entity_id = 2;
    string entity_name = 3;
    uint64 initial_filing_date = 4;
    string jurisdiction = 5;
    string status = 6;
    string sos = 7;
    string type = 8;
    string filing_type = 9;
    string foreign_name = 10;
    string ftb = 11;
    string vcfcf = 12;
    uint64 suspension_date = 13;
    string last_filed_num = 14;
    uint64 last_filed_date = 15;
    string principal_address = 16;
    string mailing_address = 17;
    string local_address = 18;
    string management_structure = 19;
    string business_type = 20;
}

message AddEntityRequest {
    map<string, string> fields = 1;
    EntityType type = 2;
}

message EntityRequest {
    string id = 1;
    EntityType type = 2;
}

message EntityResponse {
    bool ok = 1;
    oneof test_oneof {
        Agent agent = 2;
        Filing filing = 3;
    }
}

message StreamEntityResponse {
    oneof test_oneof {
        EntityResponse entity_response = 1;
        string error = 2;
    }
}

service Scheduler {
    rpc CreateRun(RunRequest) returns (RunResponse) {}
    rpc GetRun(RunRequest) returns (RunResponse) {}
    rpc DeleteRun(DeleteRunRequest) returns (DeleteResponse) {}

    rpc ProcessLocalCSVMongoWorkflow(BatchCSVRequest) returns (RunResponse) {}

    rpc AddEntity(AddEntityRequest) returns (EntityResponse) {}
    rpc DeleteEntity(EntityRequest) returns (DeleteResponse) {}
    rpc GetEntity(EntityRequest) returns (EntityResponse) {}
    rpc AddBusinessEntities(stream AddEntityRequest) returns (stream StreamEntityResponse) {}
}
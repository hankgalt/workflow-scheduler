// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: api/v1/scheduler.proto

package scheduler_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SchedulerClient is the client API for Scheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchedulerClient interface {
	CreateRun(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error)
	UpdateRun(ctx context.Context, in *UpdateRunRequest, opts ...grpc.CallOption) (*RunResponse, error)
	GetRun(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error)
	DeleteRun(ctx context.Context, in *DeleteRunRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	SearchRuns(ctx context.Context, in *SearchRunRequest, opts ...grpc.CallOption) (*RunsResponse, error)
	AddEntity(ctx context.Context, in *AddEntityRequest, opts ...grpc.CallOption) (*AddEntityResponse, error)
	DeleteEntity(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	GetEntity(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*EntityResponse, error)
	AddBusinessEntities(ctx context.Context, opts ...grpc.CallOption) (Scheduler_AddBusinessEntitiesClient, error)
	ProcessFileSignalWorkflow(ctx context.Context, in *FileSignalRequest, opts ...grpc.CallOption) (*RunResponse, error)
	QueryFileWorkflowState(ctx context.Context, in *QueryWorkflowRequest, opts ...grpc.CallOption) (*FileWorkflowStateResponse, error)
}

type schedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerClient(cc grpc.ClientConnInterface) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) CreateRun(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error) {
	out := new(RunResponse)
	err := c.cc.Invoke(ctx, "/scheduler.v1.Scheduler/CreateRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) UpdateRun(ctx context.Context, in *UpdateRunRequest, opts ...grpc.CallOption) (*RunResponse, error) {
	out := new(RunResponse)
	err := c.cc.Invoke(ctx, "/scheduler.v1.Scheduler/UpdateRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) GetRun(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error) {
	out := new(RunResponse)
	err := c.cc.Invoke(ctx, "/scheduler.v1.Scheduler/GetRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) DeleteRun(ctx context.Context, in *DeleteRunRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/scheduler.v1.Scheduler/DeleteRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) SearchRuns(ctx context.Context, in *SearchRunRequest, opts ...grpc.CallOption) (*RunsResponse, error) {
	out := new(RunsResponse)
	err := c.cc.Invoke(ctx, "/scheduler.v1.Scheduler/SearchRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) AddEntity(ctx context.Context, in *AddEntityRequest, opts ...grpc.CallOption) (*AddEntityResponse, error) {
	out := new(AddEntityResponse)
	err := c.cc.Invoke(ctx, "/scheduler.v1.Scheduler/AddEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) DeleteEntity(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/scheduler.v1.Scheduler/DeleteEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) GetEntity(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*EntityResponse, error) {
	out := new(EntityResponse)
	err := c.cc.Invoke(ctx, "/scheduler.v1.Scheduler/GetEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) AddBusinessEntities(ctx context.Context, opts ...grpc.CallOption) (Scheduler_AddBusinessEntitiesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Scheduler_ServiceDesc.Streams[0], "/scheduler.v1.Scheduler/AddBusinessEntities", opts...)
	if err != nil {
		return nil, err
	}
	x := &schedulerAddBusinessEntitiesClient{stream}
	return x, nil
}

type Scheduler_AddBusinessEntitiesClient interface {
	Send(*AddEntityRequest) error
	Recv() (*StreamAddEntityResponse, error)
	grpc.ClientStream
}

type schedulerAddBusinessEntitiesClient struct {
	grpc.ClientStream
}

func (x *schedulerAddBusinessEntitiesClient) Send(m *AddEntityRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *schedulerAddBusinessEntitiesClient) Recv() (*StreamAddEntityResponse, error) {
	m := new(StreamAddEntityResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *schedulerClient) ProcessFileSignalWorkflow(ctx context.Context, in *FileSignalRequest, opts ...grpc.CallOption) (*RunResponse, error) {
	out := new(RunResponse)
	err := c.cc.Invoke(ctx, "/scheduler.v1.Scheduler/ProcessFileSignalWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) QueryFileWorkflowState(ctx context.Context, in *QueryWorkflowRequest, opts ...grpc.CallOption) (*FileWorkflowStateResponse, error) {
	out := new(FileWorkflowStateResponse)
	err := c.cc.Invoke(ctx, "/scheduler.v1.Scheduler/QueryFileWorkflowState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulerServer is the server API for Scheduler service.
// All implementations must embed UnimplementedSchedulerServer
// for forward compatibility
type SchedulerServer interface {
	CreateRun(context.Context, *RunRequest) (*RunResponse, error)
	UpdateRun(context.Context, *UpdateRunRequest) (*RunResponse, error)
	GetRun(context.Context, *RunRequest) (*RunResponse, error)
	DeleteRun(context.Context, *DeleteRunRequest) (*DeleteResponse, error)
	SearchRuns(context.Context, *SearchRunRequest) (*RunsResponse, error)
	AddEntity(context.Context, *AddEntityRequest) (*AddEntityResponse, error)
	DeleteEntity(context.Context, *EntityRequest) (*DeleteResponse, error)
	GetEntity(context.Context, *EntityRequest) (*EntityResponse, error)
	AddBusinessEntities(Scheduler_AddBusinessEntitiesServer) error
	ProcessFileSignalWorkflow(context.Context, *FileSignalRequest) (*RunResponse, error)
	QueryFileWorkflowState(context.Context, *QueryWorkflowRequest) (*FileWorkflowStateResponse, error)
	mustEmbedUnimplementedSchedulerServer()
}

// UnimplementedSchedulerServer must be embedded to have forward compatible implementations.
type UnimplementedSchedulerServer struct {
}

func (UnimplementedSchedulerServer) CreateRun(context.Context, *RunRequest) (*RunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRun not implemented")
}
func (UnimplementedSchedulerServer) UpdateRun(context.Context, *UpdateRunRequest) (*RunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRun not implemented")
}
func (UnimplementedSchedulerServer) GetRun(context.Context, *RunRequest) (*RunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRun not implemented")
}
func (UnimplementedSchedulerServer) DeleteRun(context.Context, *DeleteRunRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRun not implemented")
}
func (UnimplementedSchedulerServer) SearchRuns(context.Context, *SearchRunRequest) (*RunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRuns not implemented")
}
func (UnimplementedSchedulerServer) AddEntity(context.Context, *AddEntityRequest) (*AddEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEntity not implemented")
}
func (UnimplementedSchedulerServer) DeleteEntity(context.Context, *EntityRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntity not implemented")
}
func (UnimplementedSchedulerServer) GetEntity(context.Context, *EntityRequest) (*EntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntity not implemented")
}
func (UnimplementedSchedulerServer) AddBusinessEntities(Scheduler_AddBusinessEntitiesServer) error {
	return status.Errorf(codes.Unimplemented, "method AddBusinessEntities not implemented")
}
func (UnimplementedSchedulerServer) ProcessFileSignalWorkflow(context.Context, *FileSignalRequest) (*RunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessFileSignalWorkflow not implemented")
}
func (UnimplementedSchedulerServer) QueryFileWorkflowState(context.Context, *QueryWorkflowRequest) (*FileWorkflowStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFileWorkflowState not implemented")
}
func (UnimplementedSchedulerServer) mustEmbedUnimplementedSchedulerServer() {}

// UnsafeSchedulerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchedulerServer will
// result in compilation errors.
type UnsafeSchedulerServer interface {
	mustEmbedUnimplementedSchedulerServer()
}

func RegisterSchedulerServer(s grpc.ServiceRegistrar, srv SchedulerServer) {
	s.RegisterService(&Scheduler_ServiceDesc, srv)
}

func _Scheduler_CreateRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).CreateRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.v1.Scheduler/CreateRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).CreateRun(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_UpdateRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).UpdateRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.v1.Scheduler/UpdateRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).UpdateRun(ctx, req.(*UpdateRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_GetRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).GetRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.v1.Scheduler/GetRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).GetRun(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_DeleteRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).DeleteRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.v1.Scheduler/DeleteRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).DeleteRun(ctx, req.(*DeleteRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_SearchRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).SearchRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.v1.Scheduler/SearchRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).SearchRuns(ctx, req.(*SearchRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_AddEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).AddEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.v1.Scheduler/AddEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).AddEntity(ctx, req.(*AddEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_DeleteEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).DeleteEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.v1.Scheduler/DeleteEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).DeleteEntity(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_GetEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).GetEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.v1.Scheduler/GetEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).GetEntity(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_AddBusinessEntities_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SchedulerServer).AddBusinessEntities(&schedulerAddBusinessEntitiesServer{stream})
}

type Scheduler_AddBusinessEntitiesServer interface {
	Send(*StreamAddEntityResponse) error
	Recv() (*AddEntityRequest, error)
	grpc.ServerStream
}

type schedulerAddBusinessEntitiesServer struct {
	grpc.ServerStream
}

func (x *schedulerAddBusinessEntitiesServer) Send(m *StreamAddEntityResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *schedulerAddBusinessEntitiesServer) Recv() (*AddEntityRequest, error) {
	m := new(AddEntityRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Scheduler_ProcessFileSignalWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileSignalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).ProcessFileSignalWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.v1.Scheduler/ProcessFileSignalWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).ProcessFileSignalWorkflow(ctx, req.(*FileSignalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_QueryFileWorkflowState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).QueryFileWorkflowState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.v1.Scheduler/QueryFileWorkflowState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).QueryFileWorkflowState(ctx, req.(*QueryWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Scheduler_ServiceDesc is the grpc.ServiceDesc for Scheduler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Scheduler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scheduler.v1.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRun",
			Handler:    _Scheduler_CreateRun_Handler,
		},
		{
			MethodName: "UpdateRun",
			Handler:    _Scheduler_UpdateRun_Handler,
		},
		{
			MethodName: "GetRun",
			Handler:    _Scheduler_GetRun_Handler,
		},
		{
			MethodName: "DeleteRun",
			Handler:    _Scheduler_DeleteRun_Handler,
		},
		{
			MethodName: "SearchRuns",
			Handler:    _Scheduler_SearchRuns_Handler,
		},
		{
			MethodName: "AddEntity",
			Handler:    _Scheduler_AddEntity_Handler,
		},
		{
			MethodName: "DeleteEntity",
			Handler:    _Scheduler_DeleteEntity_Handler,
		},
		{
			MethodName: "GetEntity",
			Handler:    _Scheduler_GetEntity_Handler,
		},
		{
			MethodName: "ProcessFileSignalWorkflow",
			Handler:    _Scheduler_ProcessFileSignalWorkflow_Handler,
		},
		{
			MethodName: "QueryFileWorkflowState",
			Handler:    _Scheduler_QueryFileWorkflowState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddBusinessEntities",
			Handler:       _Scheduler_AddBusinessEntities_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/v1/scheduler.proto",
}

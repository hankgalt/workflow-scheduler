// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: api/v1/scheduler.proto

package scheduler_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Scheduler_CreateRun_FullMethodName                    = "/scheduler.v1.Scheduler/CreateRun"
	Scheduler_GetRun_FullMethodName                       = "/scheduler.v1.Scheduler/GetRun"
	Scheduler_DeleteRun_FullMethodName                    = "/scheduler.v1.Scheduler/DeleteRun"
	Scheduler_ProcessLocalCSVMongoWorkflow_FullMethodName = "/scheduler.v1.Scheduler/ProcessLocalCSVMongoWorkflow"
	Scheduler_AddEntity_FullMethodName                    = "/scheduler.v1.Scheduler/AddEntity"
	Scheduler_DeleteEntity_FullMethodName                 = "/scheduler.v1.Scheduler/DeleteEntity"
	Scheduler_GetEntity_FullMethodName                    = "/scheduler.v1.Scheduler/GetEntity"
	Scheduler_AddBusinessEntities_FullMethodName          = "/scheduler.v1.Scheduler/AddBusinessEntities"
)

// SchedulerClient is the client API for Scheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchedulerClient interface {
	CreateRun(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error)
	GetRun(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error)
	DeleteRun(ctx context.Context, in *DeleteRunRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	ProcessLocalCSVMongoWorkflow(ctx context.Context, in *BatchCSVRequest, opts ...grpc.CallOption) (*RunResponse, error)
	AddEntity(ctx context.Context, in *AddEntityRequest, opts ...grpc.CallOption) (*EntityResponse, error)
	DeleteEntity(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	GetEntity(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*EntityResponse, error)
	AddBusinessEntities(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AddEntityRequest, StreamEntityResponse], error)
}

type schedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerClient(cc grpc.ClientConnInterface) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) CreateRun(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunResponse)
	err := c.cc.Invoke(ctx, Scheduler_CreateRun_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) GetRun(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunResponse)
	err := c.cc.Invoke(ctx, Scheduler_GetRun_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) DeleteRun(ctx context.Context, in *DeleteRunRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, Scheduler_DeleteRun_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) ProcessLocalCSVMongoWorkflow(ctx context.Context, in *BatchCSVRequest, opts ...grpc.CallOption) (*RunResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunResponse)
	err := c.cc.Invoke(ctx, Scheduler_ProcessLocalCSVMongoWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) AddEntity(ctx context.Context, in *AddEntityRequest, opts ...grpc.CallOption) (*EntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EntityResponse)
	err := c.cc.Invoke(ctx, Scheduler_AddEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) DeleteEntity(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, Scheduler_DeleteEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) GetEntity(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*EntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EntityResponse)
	err := c.cc.Invoke(ctx, Scheduler_GetEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) AddBusinessEntities(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AddEntityRequest, StreamEntityResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Scheduler_ServiceDesc.Streams[0], Scheduler_AddBusinessEntities_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AddEntityRequest, StreamEntityResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Scheduler_AddBusinessEntitiesClient = grpc.BidiStreamingClient[AddEntityRequest, StreamEntityResponse]

// SchedulerServer is the server API for Scheduler service.
// All implementations must embed UnimplementedSchedulerServer
// for forward compatibility.
type SchedulerServer interface {
	CreateRun(context.Context, *RunRequest) (*RunResponse, error)
	GetRun(context.Context, *RunRequest) (*RunResponse, error)
	DeleteRun(context.Context, *DeleteRunRequest) (*DeleteResponse, error)
	ProcessLocalCSVMongoWorkflow(context.Context, *BatchCSVRequest) (*RunResponse, error)
	AddEntity(context.Context, *AddEntityRequest) (*EntityResponse, error)
	DeleteEntity(context.Context, *EntityRequest) (*DeleteResponse, error)
	GetEntity(context.Context, *EntityRequest) (*EntityResponse, error)
	AddBusinessEntities(grpc.BidiStreamingServer[AddEntityRequest, StreamEntityResponse]) error
	mustEmbedUnimplementedSchedulerServer()
}

// UnimplementedSchedulerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSchedulerServer struct{}

func (UnimplementedSchedulerServer) CreateRun(context.Context, *RunRequest) (*RunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRun not implemented")
}
func (UnimplementedSchedulerServer) GetRun(context.Context, *RunRequest) (*RunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRun not implemented")
}
func (UnimplementedSchedulerServer) DeleteRun(context.Context, *DeleteRunRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRun not implemented")
}
func (UnimplementedSchedulerServer) ProcessLocalCSVMongoWorkflow(context.Context, *BatchCSVRequest) (*RunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessLocalCSVMongoWorkflow not implemented")
}
func (UnimplementedSchedulerServer) AddEntity(context.Context, *AddEntityRequest) (*EntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEntity not implemented")
}
func (UnimplementedSchedulerServer) DeleteEntity(context.Context, *EntityRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntity not implemented")
}
func (UnimplementedSchedulerServer) GetEntity(context.Context, *EntityRequest) (*EntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntity not implemented")
}
func (UnimplementedSchedulerServer) AddBusinessEntities(grpc.BidiStreamingServer[AddEntityRequest, StreamEntityResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AddBusinessEntities not implemented")
}
func (UnimplementedSchedulerServer) mustEmbedUnimplementedSchedulerServer() {}
func (UnimplementedSchedulerServer) testEmbeddedByValue()                   {}

// UnsafeSchedulerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchedulerServer will
// result in compilation errors.
type UnsafeSchedulerServer interface {
	mustEmbedUnimplementedSchedulerServer()
}

func RegisterSchedulerServer(s grpc.ServiceRegistrar, srv SchedulerServer) {
	// If the following call pancis, it indicates UnimplementedSchedulerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Scheduler_ServiceDesc, srv)
}

func _Scheduler_CreateRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).CreateRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scheduler_CreateRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).CreateRun(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_GetRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).GetRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scheduler_GetRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).GetRun(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_DeleteRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).DeleteRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scheduler_DeleteRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).DeleteRun(ctx, req.(*DeleteRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_ProcessLocalCSVMongoWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCSVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).ProcessLocalCSVMongoWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scheduler_ProcessLocalCSVMongoWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).ProcessLocalCSVMongoWorkflow(ctx, req.(*BatchCSVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_AddEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).AddEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scheduler_AddEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).AddEntity(ctx, req.(*AddEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_DeleteEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).DeleteEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scheduler_DeleteEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).DeleteEntity(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_GetEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).GetEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scheduler_GetEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).GetEntity(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_AddBusinessEntities_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SchedulerServer).AddBusinessEntities(&grpc.GenericServerStream[AddEntityRequest, StreamEntityResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Scheduler_AddBusinessEntitiesServer = grpc.BidiStreamingServer[AddEntityRequest, StreamEntityResponse]

// Scheduler_ServiceDesc is the grpc.ServiceDesc for Scheduler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Scheduler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scheduler.v1.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRun",
			Handler:    _Scheduler_CreateRun_Handler,
		},
		{
			MethodName: "GetRun",
			Handler:    _Scheduler_GetRun_Handler,
		},
		{
			MethodName: "DeleteRun",
			Handler:    _Scheduler_DeleteRun_Handler,
		},
		{
			MethodName: "ProcessLocalCSVMongoWorkflow",
			Handler:    _Scheduler_ProcessLocalCSVMongoWorkflow_Handler,
		},
		{
			MethodName: "AddEntity",
			Handler:    _Scheduler_AddEntity_Handler,
		},
		{
			MethodName: "DeleteEntity",
			Handler:    _Scheduler_DeleteEntity_Handler,
		},
		{
			MethodName: "GetEntity",
			Handler:    _Scheduler_GetEntity_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddBusinessEntities",
			Handler:       _Scheduler_AddBusinessEntities_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/v1/scheduler.proto",
}
